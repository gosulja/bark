use super::{app::BarkApp, decoders::*};

pub fn decompile(app: &mut BarkApp) {
    app.variables.clear();
    app.next_var_id = 0;

    let mut code = String::new();
    code.push_str("/* code generated by bark decompiler */\n");
    code.push_str("#include <stdint.h>\n\n");
    code.push_str("void main() {\n");

    for inst in app.output.clone() {
        if inst.mnemonic == "mov" && inst.operands.len() == 2 {
            let reg = &inst.operands[0];
            let val = &inst.operands[1];

            if let Ok(val) = if val.starts_with("0x") {
                i32::from_str_radix(&val[2..], 16)
            } else {
                val.parse::<i32>()
            } {
                if let Some(var) = app.variables.get_mut(reg) {
                    var.value = val;
                    code.push_str(&format!("    {} = {}; /* {} */\n", var.name, val, reg));
                } else {
                    let vname = app.gen_var_name();
                    let var = Var {
                        name: vname.clone(),
                        value: val,
                        register: reg.clone(),
                    };

                    app.variables.insert(reg.clone(), var);
                    code.push_str(&format!("    int32_t {} = {}; /* {} */\n", vname, val, reg));
                }
            }
        }
    }

    code.push_str("}\n");
    app.decompiled = code;
}
